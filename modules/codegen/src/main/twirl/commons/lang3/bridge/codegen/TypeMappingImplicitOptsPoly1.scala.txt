@()
package commons.lang3.bridge.impl
import commons.lang3.bridge.TypeMapping

@paramType(start: Int, i1: Int) = { @for(i2 <- start to i1) { @if(i2 > start){ , } I@{i2} } }
@hlistTypeMappingTypeImpl(count: Int, index: Int) = {
    @if(count > 0) { HlistTypeMappingPositive[I@{index}, @{hlistTypeMappingTypeImpl(count - 1, index + 1)}] } else { HlistTypeMappingZero }
}
@hlistTypeMappingType(count: Int) = {
    @hlistTypeMappingTypeImpl(count, 1)
}

trait TypeMappingImplicitOptsPolyHigher {
    @for(i1 <- 2 to 22) {
        @@inline implicit def typeMappingImplicit@{i1}Higher[I, @paramType(1, i1)](implicit hlistTypeMapping: TypeMapping[I, @hlistTypeMappingType(i1)]): TypeMapping[I, (@paramType(1, i1))] = hlistTypeMapping.asInstanceOf[TypeMapping[I, (@paramType(1, i1))]]
    }
}